{"title":"C/C++ 多维数组的处理","uid":"f4b1f6c62c51b83cc4ba3ecdcd8b9c52","slug":"C中多维数组的处理","date":"2021-09-19T13:17:35.450Z","updated":"2021-11-29T15:08:17.177Z","comments":true,"path":"api/articles/C中多维数组的处理.json","keywords":null,"cover":null,"content":"<p>笔者要用到多维数组的时候经常忘了多维数组怎么用，在此总结一下：</p>\n<p>【内容产出中】</p>\n<p>1.二维数组的函数调用实例</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F;声明\nvoid bubbleSort(float (*num)[40],int size);\n&#x2F;&#x2F;调用\nbubbleSort( stu , 40);\n&#x2F;&#x2F;思想：二维数组——数组的数组</code></pre>\n\n<p>2.把二维数组当一维数组进行赋值：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int *p&#x3D;&amp;a[0][0];&#x2F;&#x2F;获取二维数组首地址\nfor(int i&#x3D;0;i&lt;6;i++)\n&#123;\nscnaf(&quot;%d&quot;,p);\np++;\n&#125;</code></pre>\n\n<p>3.使用 C++ 容器时，若可以使用<code>at</code>等方法获得对应元素，以缓解运算符<code>[]</code>的不稳定性问题。</p>\n<p>如： array（C++11）</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>at</code></td>\n<td>访问指定的元素，同时进行越界检查<code>at</code> 若遇 <code>pos &gt;= size()</code> 的情况会抛出 <code>std::out_of_range</code>。</td>\n</tr>\n<tr>\n<td><code>operator[]</code></td>\n<td>访问指定的元素，<strong>不</strong> 进行越界检查</td>\n</tr>\n</tbody></table>\n<p>4.多维vector的行列空间预留</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">vector&lt;vector&lt;bool&gt; &gt; table(256);&#x2F;&#x2F;256行\ntable.resize(512);&#x2F;&#x2F;512列</code></pre>\n\n","text":"笔者要用到多维数组的时候经常忘了多维数组怎么用，在此总结一下： 【内容产出中】 1.二维数组的函数调用实例 &#x2F;&#x2F;声明 void bubbleSort(float (*num)[40],int size); &#x2F;&#x2F;调用 bubbleSort( ...","link":"","photos":[],"count_time":{"symbolsCount":609,"symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"谈谈我对艺术的理解","uid":"6d71c2df7638169872fb8e397d99973c","slug":"谈谈我对艺术的理解","date":"2021-09-27T11:50:43.875Z","updated":"2021-11-24T07:37:44.189Z","comments":true,"path":"api/articles/谈谈我对艺术的理解.json","keywords":null,"cover":null,"text":"艺术[TOC] 【内容产出中】 近来身体良好，灵感迸发，借此良机，抒发笔者对艺术所感，同时借以小憩。 艺术，听似很有逼格的词语，其实也可以很接地气。艺术，不仅仅是在798艺术中心里，用不同的理论和方法表现出富有冲击力的美感和画面，也可以是用各种形式对生活的记录。 信息的记录身临其...","link":"","photos":[],"count_time":{"symbolsCount":507,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"算法模板","uid":"9e122bacf6c8b61a95cac22cf033e3e5","slug":"算法模板","date":"2021-09-09T12:13:56.975Z","updated":"2021-11-24T07:37:15.894Z","comments":true,"path":"api/articles/算法模板.json","keywords":null,"cover":[],"text":"回溯法[TOC] 解决一个回溯问题，实际上就是一个决策树的遍历过程，使用 isValid 函数剪枝。回溯算法模板框架如下： void backtracking(参数) &#123; if (结束遍历条件) &#123; 存放结果; return; &#125; for (选择：本...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}