{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}},"post_list":[{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"函数式编程导论","date":"2021-11-26T01:27:06.727Z","updated":"2021-11-26T01:27:06.727Z","comments":true,"path":"api/articles/函数式编程导论.json","keywords":null,"cover":null,"text":"","link":"","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"数据结构笔记——考试中的非主流玩法","date":"2021-11-23T09:05:09.123Z","updated":"2021-12-27T14:56:21.539Z","comments":true,"path":"api/articles/数据结构笔记——考试中的非主流玩法.json","keywords":null,"cover":[],"text":"[toc] 实际考试中的数据结构题目会比平时代码常用的东西多一点。在此提纲掣领地做一复习。 非常规队列顺序的环形实现顺序队列在数据不断地进队出队过程中，在顺序表中的位置不断后移。 可以使用巧妙的方法将顺序表打造成一个环状表，如图 ： 在真正的实现时，没必要真创建这样一种结构，可以...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"C++ 特性","uid":"02283cddd2f2c72dd0f98ea650045063","slug":"从C进步到C++——特性","date":"2021-09-06T11:11:52.010Z","updated":"2022-01-02T12:08:13.849Z","comments":true,"path":"api/articles/从C进步到C++——特性.json","keywords":null,"cover":null,"text":"从C进步到C++——特性[TOC] 结构体初始化构造定义结构体时，加入以下语句，可以方便地进行初始化。 struct student&#123; int id; char gender; student()&#123;&#125; &#x2F;&#x2F;系统默认，用于未经初始化...","link":"","photos":[],"count_time":{"symbolsCount":"3.3k","symbolsTime":"3 mins."},"categories":[{"name":"语言基础","slug":"语言基础","count":1,"path":"api/categories/语言基础.json"}],"tags":[{"name":"C++,语法","slug":"C-语法","count":1,"path":"api/tags/C-语法.json"}],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"数学之美摘抄","date":"2021-10-04T12:09:34.011Z","updated":"2021-10-04T12:09:34.453Z","comments":true,"path":"api/articles/数学之美摘抄.json","keywords":null,"cover":null,"text":"数学之美摘抄合理利用信息，而非玩弄什么公式和机器学习算法，是做好搜索的关键。 先帮用户解决 80% 的问题，再慢慢解决剩下的 20% 问题。 ","link":"","photos":[],"count_time":{"symbolsCount":71,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"谈谈我对艺术的理解","uid":"6d71c2df7638169872fb8e397d99973c","slug":"谈谈我对艺术的理解","date":"2021-09-27T11:50:43.875Z","updated":"2021-11-24T07:37:44.189Z","comments":true,"path":"api/articles/谈谈我对艺术的理解.json","keywords":null,"cover":null,"text":"艺术[TOC] 【内容产出中】 近来身体良好，灵感迸发，借此良机，抒发笔者对艺术所感，同时借以小憩。 艺术，听似很有逼格的词语，其实也可以很接地气。艺术，不仅仅是在798艺术中心里，用不同的理论和方法表现出富有冲击力的美感和画面，也可以是用各种形式对生活的记录。 信息的记录身临其...","link":"","photos":[],"count_time":{"symbolsCount":507,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"C/C++ 多维数组的处理","uid":"f4b1f6c62c51b83cc4ba3ecdcd8b9c52","slug":"C中多维数组的处理","date":"2021-09-19T13:17:35.450Z","updated":"2021-11-29T15:08:17.177Z","comments":true,"path":"api/articles/C中多维数组的处理.json","keywords":null,"cover":null,"text":"笔者要用到多维数组的时候经常忘了多维数组怎么用，在此总结一下： 【内容产出中】 1.二维数组的函数调用实例 &#x2F;&#x2F;声明 void bubbleSort(float (*num)[40],int size); &#x2F;&#x2F;调用 bubbleSort( ...","link":"","photos":[],"count_time":{"symbolsCount":609,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"算法模板","uid":"9e122bacf6c8b61a95cac22cf033e3e5","slug":"算法模板","date":"2021-09-09T12:13:56.975Z","updated":"2021-11-24T07:37:15.894Z","comments":true,"path":"api/articles/算法模板.json","keywords":null,"cover":[],"text":"回溯法[TOC] 解决一个回溯问题，实际上就是一个决策树的遍历过程，使用 isValid 函数剪枝。回溯算法模板框架如下： void backtracking(参数) &#123; if (结束遍历条件) &#123; 存放结果; return; &#125; for (选择：本...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"","uid":"f73a8e23e6f6f669cf99c7dba8fa0722","slug":"C++STL的使用","date":"2021-08-06T15:07:15.151Z","updated":"2022-02-03T09:30:39.678Z","comments":true,"path":"api/articles/C++STL的使用.json","keywords":null,"cover":[],"text":"title: C++ STL使用手册tags: C++,语法categories: 语言基础feature: true #C++ STL的使用手册 [toc] 共有函数=：有赋值运算符以及复制构造函数。 begin()：返回指向开头元素的迭代器。 end()：返回指向末尾的下一个...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[],"tags":[],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"动态规划的优化","uid":"138e79928c1a716384cb2dd1093bf72b","slug":"动态规划优化","date":"2021-08-06T14:40:33.683Z","updated":"2021-08-07T07:47:49.093Z","comments":true,"path":"api/articles/动态规划优化.json","keywords":null,"cover":null,"text":"动态规划的优化策略单调队列/单调栈优化单调队列eg.[Poj2823 - 滑动窗口]给予一个长度为n的数组，输出每k个连续元素中的最大值和最小值。 解：使用STL容器deque，维护一个单调的数列。以求最小值为例，操作包括： 序列例：1 3 -1 -3 5 3 6 7。 维护递增...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"算法进阶","slug":"算法进阶","count":1,"path":"api/categories/算法进阶.json"}],"tags":[{"name":"dp","slug":"dp","count":2,"path":"api/tags/dp.json"}],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"动态规划初步","uid":"b94fc74a26961727683d8eed12a779bd","slug":"动态规划初步","date":"2021-08-06T09:30:57.763Z","updated":"2021-11-24T07:31:52.238Z","comments":true,"path":"api/articles/动态规划初步.json","keywords":null,"cover":[],"text":"动态规划初步[toc] 基本思路动态规划实际是“聪明地枚举”，会遍历所有可能的情况。对其中的“剪枝”（不丢失最优解）属于贪心的范畴，可能提高了“溯源”的难度。 首先注意：动态规划不是说一上来就写状态转移方程（直接做“备忘录”），而是逐步分析，如下： 分析最优子结构 -&gt; 递...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"算法基础","slug":"算法基础","count":1,"path":"api/categories/算法基础.json"}],"tags":[{"name":"dp","slug":"dp","count":2,"path":"api/tags/dp.json"}],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}],"categories":3,"tags":3,"word_count":"18k","post_count":10}