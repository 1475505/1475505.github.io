{"name":"dp","slug":"dp","count":2,"postlist":[{"title":"动态规划的优化","uid":"138e79928c1a716384cb2dd1093bf72b","slug":"动态规划优化","date":"2021-08-06T14:40:33.683Z","updated":"2021-08-07T07:47:49.093Z","comments":true,"path":"api/articles/动态规划优化.json","keywords":null,"cover":null,"text":"动态规划的优化策略单调队列/单调栈优化单调队列eg.[Poj2823 - 滑动窗口]给予一个长度为n的数组，输出每k个连续元素中的最大值和最小值。 解：使用STL容器deque，维护一个单调的数列。以求最小值为例，操作包括： 序列例：1 3 -1 -3 5 3 6 7。 维护递增...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"算法进阶","slug":"算法进阶","count":1,"path":"api/categories/算法进阶.json"}],"tags":[{"name":"dp","slug":"dp","count":2,"path":"api/tags/dp.json"}],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"动态规划初步","uid":"b94fc74a26961727683d8eed12a779bd","slug":"动态规划初步","date":"2021-08-06T09:30:57.763Z","updated":"2021-11-24T07:31:52.238Z","comments":true,"path":"api/articles/动态规划初步.json","keywords":null,"cover":[],"text":"动态规划初步[toc] 基本思路动态规划实际是“聪明地枚举”，会遍历所有可能的情况。对其中的“剪枝”（不丢失最优解）属于贪心的范畴，可能提高了“溯源”的难度。 首先注意：动态规划不是说一上来就写状态转移方程（直接做“备忘录”），而是逐步分析，如下： 分析最优子结构 -&gt; 递...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"算法基础","slug":"算法基础","count":1,"path":"api/categories/算法基础.json"}],"tags":[{"name":"dp","slug":"dp","count":2,"path":"api/tags/dp.json"}],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}