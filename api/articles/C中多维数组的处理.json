{"title":"C/C++ 多维数组的处理","uid":"f4b1f6c62c51b83cc4ba3ecdcd8b9c52","slug":"C中多维数组的处理","date":"2021-10-29T15:33:11.000Z","updated":"2022-02-03T13:39:41.363Z","comments":true,"path":"api/articles/C中多维数组的处理.json","keywords":null,"cover":null,"content":"<p>笔者要用到多维数组的时候经常忘了多维数组怎么用，在此总结一下：</p>\n<p>【内容产出中】</p>\n<p>1.二维数组的函数调用实例</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F;声明\nvoid bubbleSort(float (*num)[40],int size);\n&#x2F;&#x2F;调用\nbubbleSort( stu , 40);\n&#x2F;&#x2F;思想：二维数组——数组的数组</code></pre>\n<p>2.把二维数组当一维数组进行赋值：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">int *p&#x3D;&amp;a[0][0];&#x2F;&#x2F;获取二维数组首地址\nfor(int i&#x3D;0;i&lt;6;i++)\n&#123;\nscnaf(&quot;%d&quot;,p);\np++;\n&#125;</code></pre>\n<p>3.使用 C++ 容器时，若可以使用<code>at</code>等方法获得对应元素，以缓解运算符<code>[]</code>的不稳定性问题。</p>\n<p>如： array（C++11）</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>at</code></td>\n<td>访问指定的元素，同时进行越界检查<code>at</code> 若遇 <code>pos &gt;= size()</code> 的情况会抛出 <code>std::out_of_range</code>。</td>\n</tr>\n<tr>\n<td><code>operator[]</code></td>\n<td>访问指定的元素，<strong>不</strong> 进行越界检查</td>\n</tr>\n</tbody>\n</table>\n<p>4.多维vector的行列空间预留</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">vector&lt;vector&lt;bool&gt; &gt; table(256);&#x2F;&#x2F;256行\ntable.resize(512);&#x2F;&#x2F;512列</code></pre>\n","text":"笔者要用到多维数组的时候经常忘了多维数组怎么用，在此总结一下： 【内容产出中】 1.二维数组的函数调用实例 &#x2F;&#x2F;声明 void bubbleSort(float (*num)[40],int size); &#x2F;&#x2F;调用 bubbleSort( ...","link":"","photos":[],"count_time":{"symbolsCount":608,"symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"","author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"C++ STL使用手册","uid":"705805ce17024f8fb64b911637d83992","slug":"C++STL的使用","date":"2021-08-01T03:42:26.000Z","updated":"2022-02-03T13:33:26.442Z","comments":true,"path":"api/articles/C++STL的使用.json","keywords":null,"cover":[],"text":"#C++ STL的使用手册 [toc] 共有函数=：有赋值运算符以及复制构造函数。 begin()：返回指向开头元素的迭代器。 end()：返回指向末尾的下一个元素的迭代器。end() 不指向某个元素，它是末尾元素的后继。 size()：返回容器内的元素个数。 max_size(...","link":"","photos":[],"count_time":{"symbolsCount":"5.4k","symbolsTime":"5 mins."},"categories":[{"name":"语言基础","slug":"语言基础","count":2,"path":"api/categories/语言基础.json"}],"tags":[{"name":"C++,语法","slug":"C-语法","count":2,"path":"api/tags/C-语法.json"}],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{}}