{"title":"C++ 特性","uid":"02283cddd2f2c72dd0f98ea650045063","slug":"从C进步到C++——特性","date":"2021-09-06T11:11:52.010Z","updated":"2021-09-12T09:03:53.960Z","comments":true,"path":"api/articles/从C进步到C++——特性.json","keywords":null,"cover":[],"content":"<h1 id=\"从C进步到C-——特性\"><a href=\"#从C进步到C-——特性\" class=\"headerlink\" title=\"从C进步到C++——特性\"></a>从C进步到C++——特性</h1><p>[TOC]</p>\n<p>###结构体初始化构造</p>\n<p>定义结构体时，加入以下语句，可以方便地进行初始化。</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">struct student&#123;\n\tint id;\n\tchar gender;\n\t\n\tstudent()&#123;&#125;  &#x2F;&#x2F;系统默认，用于未经初始化定义结构体\n\t\n\tstudent (int _id, char _gender )&#123;\n\t\tid &#x3D; _id;\n\t\tgender &#x3D; _gender;\n\t&#125;&#x2F;&#x2F;用于初始化id和gender。注意：减少参数 可以达到只使用部分元素构造的效果\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>构造函数可以简化为一行，如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token function\">Point</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token operator\">=</span><span class=\"token number\">0</span> <span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">x</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">y</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p>这是一个二叉树的定义示例：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">struct TreeNode &#123;\n    int val;\n    TreeNode *left;\n    TreeNode *right;\n    TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;\n&#125;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"auto声明推断\"><a href=\"#auto声明推断\" class=\"headerlink\" title=\"auto声明推断\"></a>auto声明推断</h3><p>使用STL容器时的迭代器声明等等往往比较复杂，此时使用 <code>auto</code> 可简单很多：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">vector&lt;int&gt; vec;\nauto pvec &#x3D; vec.begin();&#x2F;&#x2F;vector&lt;int&gt;::iterator<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"容器类for-range循环\"><a href=\"#容器类for-range循环\" class=\"headerlink\" title=\"容器类for-range循环\"></a>容器类for-range循环</h3><p>对数组或容器执行循环操作可写成：</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">double prices[5] &#x3D; &#123;1.1 , 2.2 , 3.3 , 4.4 , 5.5&#125;\nfor ( double x : prices)&#123;&#x2F;&#x2F;只读\n\tcout&lt;&lt;x&lt;&lt;endl;\n&#125;\nfor ( double &amp;x : prices)&#123;&#x2F;&#x2F;写需要使用指针\n\tx &#x3D; x &#x2F; 2;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>结合上面的auto 部分循环可以写成：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">for ( auto x : vec )<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<h3 id=\"string类的类型转换函数\"><a href=\"#string类的类型转换函数\" class=\"headerlink\" title=\"string类的类型转换函数\"></a>string类的类型转换函数</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">43</span><span class=\"token punctuation\">;</span>\nstring s <span class=\"token operator\">=</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> d <span class=\"token operator\">=</span> <span class=\"token function\">stod</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//43.000000</span>\n<span class=\"token comment\">//对应的有：stoi , stoll , stof</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"rotate-copy-fill函数\"><a href=\"#rotate-copy-fill函数\" class=\"headerlink\" title=\"rotate/copy/fill函数\"></a>rotate/copy/fill函数</h3><p>rotate函数可以“平移”。直接看例子吧：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> a<span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">rotate</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">2</span> <span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//a:[3,4,5,6,7,8,9,1,2]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>相当于得到：[mid:end] + [begin:mid]</p>\n<p>copy函数将一个目标（容器、数组）里面的元素复制至另一个目标。</p>\n<p><strong>注：使用前 <code>newvector.resize(7) </code>这行代码为<code>newvector</code>分配空间，否则程序会崩</strong>。</p>\n<p>此外，通过<code>vector&lt;int&gt;  dp ( 7 , 0 )</code>也可以达到初始化<code>dp</code>为[0,0,0,0,0,0,0].</p>\n<p>fill函数可以为数组和vector赋初始值。头文件：<code>&lt;algorithm&gt;</code></p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">int v[10];\nfill(v,v+10,-1);&#x2F;&#x2F;相当于 memset(v,-1,sizeof v);\nint s[10][10];\nfill(s[0],s[0]+10*10,-1);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"sort-lower-bound-upper-bound-unique函数\"><a href=\"#sort-lower-bound-upper-bound-unique函数\" class=\"headerlink\" title=\"sort/lower_bound/upper_bound/unique函数\"></a>sort/lower_bound/upper_bound/unique函数</h3><p>sort函数可用于 <code>vector </code>、 数组 和 <code>deque</code> 的排序。如：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>b<span class=\"token operator\">+</span>n<span class=\"token punctuation\">,</span><span class=\"token generic-function\"><span class=\"token function\">greater</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//将b降序排列</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在<strong>已排好升序</strong>的情况下：</p>\n<p>1.可使用lower_bound函数（<code>startptr</code>，<code>endptr</code> ，<code>num</code>）得到第一个不小于<code>num</code>的值的指针。（二分查找）。如下代码返回下标：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//......</span>\n<span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>a <span class=\"token punctuation\">,</span> a<span class=\"token operator\">+</span><span class=\"token number\">10</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> a<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>2.可使用unique函数返回最后一个非重复元素的指针，如下代码进行<strong>去重</strong>。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">vec<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span> <span class=\"token function\">unique</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>拓展排序：partial_sort 方法</p>\n<h3 id=\"前缀和-partiai-sort\"><a href=\"#前缀和-partiai-sort\" class=\"headerlink\" title=\"前缀和 partiai_sort\"></a>前缀和 <code>partiai_sort</code></h3><p><img src=\"C:\\Users\\ll\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210910213528487.png\" alt=\"image-20210910213528487\"></p>\n<h3 id=\"数组生成-shuffle-iota\"><a href=\"#数组生成-shuffle-iota\" class=\"headerlink\" title=\"数组生成- shuffle/iota\"></a>数组生成- shuffle/iota</h3><p>随机打乱数组：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token function\">srand</span><span class=\"token punctuation\">(</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">random_shuffle</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>random_shuffle</code> 自 C++14 起被弃用，C++17 起被移除。可以使用 <code>shuffle</code> 函数代替：</p>\n<p><code>shuffle(v.begin(),v.end(),rand)</code>（最后一个参数传入的是使用的随机数生成器，一般情况下传入 <code>rand</code> 即可）。</p>\n<p>递增数组：与 <code>golang </code>可对比：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token function\">iota</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>arr<span class=\"token operator\">+</span>n<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[0,1,2,3,4,...];</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p>参考资料：</p>\n<p>《C++ Primer》 目录</p>\n<p>《C++ Primer Plus》  18.1</p>\n<p>《算法竞赛入门经典习题解答》第一章</p>\n","feature":true,"text":"从C进步到C++——特性[TOC] ###结构体初始化构造 定义结构体时，加入以下语句，可以方便地进行初始化。 struct student&#123; int id; char gender; student()&#123;&#125; &#x2F;&#x2F;系统默认，用于未...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"语言基础","slug":"语言基础","count":2,"path":"api/categories/语言基础.json"}],"tags":[{"name":"C++,语法","slug":"C-语法","count":2,"path":"api/tags/C-语法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%8EC%E8%BF%9B%E6%AD%A5%E5%88%B0C-%E2%80%94%E2%80%94%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">从C进步到C++——特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#auto%E5%A3%B0%E6%98%8E%E6%8E%A8%E6%96%AD\"><span class=\"toc-text\">auto声明推断</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E7%B1%BBfor-range%E5%BE%AA%E7%8E%AF\"><span class=\"toc-text\">容器类for-range循环</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#string%E7%B1%BB%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">string类的类型转换函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#rotate-copy-fill%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">rotate&#x2F;copy&#x2F;fill函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#sort-lower-bound-upper-bound-unique%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">sort&#x2F;lower_bound&#x2F;upper_bound&#x2F;unique函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%89%8D%E7%BC%80%E5%92%8C-partiai-sort\"><span class=\"toc-text\">前缀和 partiai_sort</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%94%9F%E6%88%90-shuffle-iota\"><span class=\"toc-text\">数组生成- shuffle&#x2F;iota</span></a></li></ol></li></ol></li></ol>","author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"算法模板","uid":"9e122bacf6c8b61a95cac22cf033e3e5","slug":"回溯法","date":"2021-09-09T12:13:56.975Z","updated":"2021-09-12T12:38:45.049Z","comments":true,"path":"api/articles/回溯法.json","keywords":null,"cover":[],"text":"回溯法[TOC] 解决一个回溯问题，实际上就是一个决策树的遍历过程，使用 isValid 函数剪枝。回溯算法模板框架如下： void backtracking(参数) &#123; if (结束遍历条件) &#123; 存放结果; return; &#125; for (选择：本...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"C++ STL使用手册","uid":"705805ce17024f8fb64b911637d83992","slug":"C++STL的使用","date":"2021-08-06T15:07:15.151Z","updated":"2021-09-12T09:03:35.681Z","comments":true,"path":"api/articles/C++STL的使用.json","keywords":null,"cover":[],"text":"#C++ STL的使用手册 [toc] 共有函数=：有赋值运算符以及复制构造函数。 begin()：返回指向开头元素的迭代器。 end()：返回指向末尾的下一个元素的迭代器。end() 不指向某个元素，它是末尾元素的后继。 size()：返回容器内的元素个数。 max_size(...","link":"","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"语言基础","slug":"语言基础","count":2,"path":"api/categories/语言基础.json"}],"tags":[{"name":"C++,语法","slug":"C-语法","count":2,"path":"api/tags/C-语法.json"}],"author":{"name":"Liul","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}